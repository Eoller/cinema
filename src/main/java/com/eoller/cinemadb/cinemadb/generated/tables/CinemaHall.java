/*
 * This file is generated by jOOQ.
 */
package com.eoller.cinemadb.cinemadb.generated.tables;


import com.eoller.cinemadb.cinemadb.generated.Cinemadbtest;
import com.eoller.cinemadb.cinemadb.generated.Indexes;
import com.eoller.cinemadb.cinemadb.generated.Keys;
import com.eoller.cinemadb.cinemadb.generated.tables.records.CinemaHallRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CinemaHall extends TableImpl<CinemaHallRecord> {

    private static final long serialVersionUID = 596417810;

    /**
     * The reference instance of <code>cinemaDBtest.cinema_hall</code>
     */
    public static final CinemaHall CINEMA_HALL = new CinemaHall();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CinemaHallRecord> getRecordType() {
        return CinemaHallRecord.class;
    }

    /**
     * The column <code>cinemaDBtest.cinema_hall.id</code>.
     */
    public final TableField<CinemaHallRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemaDBtest.cinema_hall.hall_number</code>.
     */
    public final TableField<CinemaHallRecord, Integer> HALL_NUMBER = createField("hall_number", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>cinemaDBtest.cinema_hall.cinema_id</code>.
     */
    public final TableField<CinemaHallRecord, Long> CINEMA_ID = createField("cinema_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cinemaDBtest.cinema_hall</code> table reference
     */
    public CinemaHall() {
        this(DSL.name("cinema_hall"), null);
    }

    /**
     * Create an aliased <code>cinemaDBtest.cinema_hall</code> table reference
     */
    public CinemaHall(String alias) {
        this(DSL.name(alias), CINEMA_HALL);
    }

    /**
     * Create an aliased <code>cinemaDBtest.cinema_hall</code> table reference
     */
    public CinemaHall(Name alias) {
        this(alias, CINEMA_HALL);
    }

    private CinemaHall(Name alias, Table<CinemaHallRecord> aliased) {
        this(alias, aliased, null);
    }

    private CinemaHall(Name alias, Table<CinemaHallRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> CinemaHall(Table<O> child, ForeignKey<O, CinemaHallRecord> key) {
        super(child, key, CINEMA_HALL);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cinemadbtest.CINEMADBTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CINEMA_HALL_FKO0VKU6P3NMP2TXOFWWYLS44JQ, Indexes.CINEMA_HALL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CinemaHallRecord, Long> getIdentity() {
        return Keys.IDENTITY_CINEMA_HALL;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CinemaHallRecord> getPrimaryKey() {
        return Keys.KEY_CINEMA_HALL_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CinemaHallRecord>> getKeys() {
        return Arrays.<UniqueKey<CinemaHallRecord>>asList(Keys.KEY_CINEMA_HALL_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CinemaHall as(String alias) {
        return new CinemaHall(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public CinemaHall as(Name alias) {
        return new CinemaHall(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CinemaHall rename(String name) {
        return new CinemaHall(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CinemaHall rename(Name name) {
        return new CinemaHall(name, null);
    }
}
