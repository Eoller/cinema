/*
 * This file is generated by jOOQ.
 */
package com.eoller.cinemadb.cinemadb.generated.tables;


import com.eoller.cinemadb.cinemadb.generated.Cinemadbtest;
import com.eoller.cinemadb.cinemadb.generated.Indexes;
import com.eoller.cinemadb.cinemadb.generated.Keys;
import com.eoller.cinemadb.cinemadb.generated.tables.records.MovieHasGenreRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MovieHasGenre extends TableImpl<MovieHasGenreRecord> {

    private static final long serialVersionUID = 17804544;

    /**
     * The reference instance of <code>cinemaDBtest.movie_has_genre</code>
     */
    public static final MovieHasGenre MOVIE_HAS_GENRE = new MovieHasGenre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieHasGenreRecord> getRecordType() {
        return MovieHasGenreRecord.class;
    }

    /**
     * The column <code>cinemaDBtest.movie_has_genre.id</code>.
     */
    public final TableField<MovieHasGenreRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemaDBtest.movie_has_genre.genre_id</code>.
     */
    public final TableField<MovieHasGenreRecord, Long> GENRE_ID = createField("genre_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cinemaDBtest.movie_has_genre.movie_id</code>.
     */
    public final TableField<MovieHasGenreRecord, Long> MOVIE_ID = createField("movie_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>cinemaDBtest.movie_has_genre</code> table reference
     */
    public MovieHasGenre() {
        this(DSL.name("movie_has_genre"), null);
    }

    /**
     * Create an aliased <code>cinemaDBtest.movie_has_genre</code> table reference
     */
    public MovieHasGenre(String alias) {
        this(DSL.name(alias), MOVIE_HAS_GENRE);
    }

    /**
     * Create an aliased <code>cinemaDBtest.movie_has_genre</code> table reference
     */
    public MovieHasGenre(Name alias) {
        this(alias, MOVIE_HAS_GENRE);
    }

    private MovieHasGenre(Name alias, Table<MovieHasGenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieHasGenre(Name alias, Table<MovieHasGenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MovieHasGenre(Table<O> child, ForeignKey<O, MovieHasGenreRecord> key) {
        super(child, key, MOVIE_HAS_GENRE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cinemadbtest.CINEMADBTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MOVIE_HAS_GENRE_FK54YB54R68XVHQJRBTSHXANYKT, Indexes.MOVIE_HAS_GENRE_FKH0G4GW1OTW9TNMIBBO9OUGK68, Indexes.MOVIE_HAS_GENRE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MovieHasGenreRecord, Long> getIdentity() {
        return Keys.IDENTITY_MOVIE_HAS_GENRE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MovieHasGenreRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_HAS_GENRE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MovieHasGenreRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieHasGenreRecord>>asList(Keys.KEY_MOVIE_HAS_GENRE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MovieHasGenre as(String alias) {
        return new MovieHasGenre(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MovieHasGenre as(Name alias) {
        return new MovieHasGenre(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieHasGenre rename(String name) {
        return new MovieHasGenre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieHasGenre rename(Name name) {
        return new MovieHasGenre(name, null);
    }
}
