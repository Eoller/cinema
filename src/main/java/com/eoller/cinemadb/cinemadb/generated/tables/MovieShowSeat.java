/*
 * This file is generated by jOOQ.
 */
package com.eoller.cinemadb.cinemadb.generated.tables;


import com.eoller.cinemadb.cinemadb.generated.Cinemadbtest;
import com.eoller.cinemadb.cinemadb.generated.Indexes;
import com.eoller.cinemadb.cinemadb.generated.Keys;
import com.eoller.cinemadb.cinemadb.generated.tables.records.MovieShowSeatRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MovieShowSeat extends TableImpl<MovieShowSeatRecord> {

    private static final long serialVersionUID = 366354846;

    /**
     * The reference instance of <code>cinemaDBtest.movie_show_seat</code>
     */
    public static final MovieShowSeat MOVIE_SHOW_SEAT = new MovieShowSeat();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieShowSeatRecord> getRecordType() {
        return MovieShowSeatRecord.class;
    }

    /**
     * The column <code>cinemaDBtest.movie_show_seat.id</code>.
     */
    public final TableField<MovieShowSeatRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemaDBtest.movie_show_seat.movie_show_id</code>.
     */
    public final TableField<MovieShowSeatRecord, Long> MOVIE_SHOW_ID = createField("movie_show_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cinemaDBtest.movie_show_seat.seat_id</code>.
     */
    public final TableField<MovieShowSeatRecord, Long> SEAT_ID = createField("seat_id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cinemaDBtest.movie_show_seat.seat_status</code>.
     */
    public final TableField<MovieShowSeatRecord, Byte> SEAT_STATUS = createField("seat_status", org.jooq.impl.SQLDataType.TINYINT, this, "");

    /**
     * Create a <code>cinemaDBtest.movie_show_seat</code> table reference
     */
    public MovieShowSeat() {
        this(DSL.name("movie_show_seat"), null);
    }

    /**
     * Create an aliased <code>cinemaDBtest.movie_show_seat</code> table reference
     */
    public MovieShowSeat(String alias) {
        this(DSL.name(alias), MOVIE_SHOW_SEAT);
    }

    /**
     * Create an aliased <code>cinemaDBtest.movie_show_seat</code> table reference
     */
    public MovieShowSeat(Name alias) {
        this(alias, MOVIE_SHOW_SEAT);
    }

    private MovieShowSeat(Name alias, Table<MovieShowSeatRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieShowSeat(Name alias, Table<MovieShowSeatRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MovieShowSeat(Table<O> child, ForeignKey<O, MovieShowSeatRecord> key) {
        super(child, key, MOVIE_SHOW_SEAT);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cinemadbtest.CINEMADBTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MOVIE_SHOW_SEAT_MOVIE_SHOW_FK_IDX, Indexes.MOVIE_SHOW_SEAT_PRIMARY, Indexes.MOVIE_SHOW_SEAT_SEAT_ID_FK_IDX);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MovieShowSeatRecord, Long> getIdentity() {
        return Keys.IDENTITY_MOVIE_SHOW_SEAT;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MovieShowSeatRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_SHOW_SEAT_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MovieShowSeatRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieShowSeatRecord>>asList(Keys.KEY_MOVIE_SHOW_SEAT_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MovieShowSeatRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MovieShowSeatRecord, ?>>asList(Keys.MOVIE_SHOW_FK, Keys.SEAT_ID_FK);
    }

    public MovieShow movieShow() {
        return new MovieShow(this, Keys.MOVIE_SHOW_FK);
    }

    public Seat seat() {
        return new Seat(this, Keys.SEAT_ID_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MovieShowSeat as(String alias) {
        return new MovieShowSeat(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MovieShowSeat as(Name alias) {
        return new MovieShowSeat(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieShowSeat rename(String name) {
        return new MovieShowSeat(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieShowSeat rename(Name name) {
        return new MovieShowSeat(name, null);
    }
}
