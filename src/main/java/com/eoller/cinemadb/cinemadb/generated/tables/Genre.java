/*
 * This file is generated by jOOQ.
 */
package com.eoller.cinemadb.cinemadb.generated.tables;


import com.eoller.cinemadb.cinemadb.generated.Cinemadbtest;
import com.eoller.cinemadb.cinemadb.generated.Indexes;
import com.eoller.cinemadb.cinemadb.generated.Keys;
import com.eoller.cinemadb.cinemadb.generated.tables.records.GenreRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Genre extends TableImpl<GenreRecord> {

    private static final long serialVersionUID = 781955057;

    /**
     * The reference instance of <code>cinemaDBtest.genre</code>
     */
    public static final Genre GENRE = new Genre();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GenreRecord> getRecordType() {
        return GenreRecord.class;
    }

    /**
     * The column <code>cinemaDBtest.genre.id</code>.
     */
    public final TableField<GenreRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>cinemaDBtest.genre.genre_name</code>.
     */
    public final TableField<GenreRecord, String> GENRE_NAME = createField("genre_name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>cinemaDBtest.genre</code> table reference
     */
    public Genre() {
        this(DSL.name("genre"), null);
    }

    /**
     * Create an aliased <code>cinemaDBtest.genre</code> table reference
     */
    public Genre(String alias) {
        this(DSL.name(alias), GENRE);
    }

    /**
     * Create an aliased <code>cinemaDBtest.genre</code> table reference
     */
    public Genre(Name alias) {
        this(alias, GENRE);
    }

    private Genre(Name alias, Table<GenreRecord> aliased) {
        this(alias, aliased, null);
    }

    private Genre(Name alias, Table<GenreRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Genre(Table<O> child, ForeignKey<O, GenreRecord> key) {
        super(child, key, GENRE);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cinemadbtest.CINEMADBTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.GENRE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<GenreRecord> getPrimaryKey() {
        return Keys.KEY_GENRE_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<GenreRecord>> getKeys() {
        return Arrays.<UniqueKey<GenreRecord>>asList(Keys.KEY_GENRE_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Genre as(String alias) {
        return new Genre(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Genre as(Name alias) {
        return new Genre(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Genre rename(String name) {
        return new Genre(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Genre rename(Name name) {
        return new Genre(name, null);
    }
}
