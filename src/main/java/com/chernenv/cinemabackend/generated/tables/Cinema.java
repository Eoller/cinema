/*
 * This file is generated by jOOQ.
 */
package com.chernenv.cinemabackend.generated.tables;


import com.chernenv.cinemabackend.generated.tables.records.CinemaRecord;
import com.chernenv.cinemabackend.generated.Cinemadbtest;
import com.chernenv.cinemabackend.generated.Indexes;
import com.chernenv.cinemabackend.generated.Keys;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Cinema extends TableImpl<CinemaRecord> {

    private static final long serialVersionUID = 850933040;

    /**
     * The reference instance of <code>cinemaDBtest.cinema</code>
     */
    public static final Cinema CINEMA = new Cinema();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CinemaRecord> getRecordType() {
        return CinemaRecord.class;
    }

    /**
     * The column <code>cinemaDBtest.cinema.id</code>.
     */
    public final TableField<CinemaRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemaDBtest.cinema.city</code>.
     */
    public final TableField<CinemaRecord, String> CITY = createField("city", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>cinemaDBtest.cinema.name</code>.
     */
    public final TableField<CinemaRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR(255), this, "");

    /**
     * Create a <code>cinemaDBtest.cinema</code> table reference
     */
    public Cinema() {
        this(DSL.name("cinema"), null);
    }

    /**
     * Create an aliased <code>cinemaDBtest.cinema</code> table reference
     */
    public Cinema(String alias) {
        this(DSL.name(alias), CINEMA);
    }

    /**
     * Create an aliased <code>cinemaDBtest.cinema</code> table reference
     */
    public Cinema(Name alias) {
        this(alias, CINEMA);
    }

    private Cinema(Name alias, Table<CinemaRecord> aliased) {
        this(alias, aliased, null);
    }

    private Cinema(Name alias, Table<CinemaRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Cinema(Table<O> child, ForeignKey<O, CinemaRecord> key) {
        super(child, key, CINEMA);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cinemadbtest.CINEMADBTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.CINEMA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<CinemaRecord, Long> getIdentity() {
        return Keys.IDENTITY_CINEMA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<CinemaRecord> getPrimaryKey() {
        return Keys.KEY_CINEMA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<CinemaRecord>> getKeys() {
        return Arrays.<UniqueKey<CinemaRecord>>asList(Keys.KEY_CINEMA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cinema as(String alias) {
        return new Cinema(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Cinema as(Name alias) {
        return new Cinema(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Cinema rename(String name) {
        return new Cinema(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Cinema rename(Name name) {
        return new Cinema(name, null);
    }
}
