/*
 * This file is generated by jOOQ.
 */
package com.chernenv.cinemabackend.generated.tables;


import com.chernenv.cinemabackend.generated.tables.records.MovieTrailerRecord;
import com.chernenv.cinemabackend.generated.Cinemadbtest;
import com.chernenv.cinemabackend.generated.Indexes;
import com.chernenv.cinemabackend.generated.Keys;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MovieTrailer extends TableImpl<MovieTrailerRecord> {

    private static final long serialVersionUID = -1397775718;

    /**
     * The reference instance of <code>cinemaDBtest.movie_trailer</code>
     */
    public static final MovieTrailer MOVIE_TRAILER = new MovieTrailer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MovieTrailerRecord> getRecordType() {
        return MovieTrailerRecord.class;
    }

    /**
     * The column <code>cinemaDBtest.movie_trailer.id</code>.
     */
    public final TableField<MovieTrailerRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>cinemaDBtest.movie_trailer.movie_id</code>.
     */
    public final TableField<MovieTrailerRecord, Long> MOVIE_ID = createField("movie_id", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>cinemaDBtest.movie_trailer.trailer_url</code>.
     */
    public final TableField<MovieTrailerRecord, String> TRAILER_URL = createField("trailer_url", org.jooq.impl.SQLDataType.VARCHAR(2000), this, "");

    /**
     * Create a <code>cinemaDBtest.movie_trailer</code> table reference
     */
    public MovieTrailer() {
        this(DSL.name("movie_trailer"), null);
    }

    /**
     * Create an aliased <code>cinemaDBtest.movie_trailer</code> table reference
     */
    public MovieTrailer(String alias) {
        this(DSL.name(alias), MOVIE_TRAILER);
    }

    /**
     * Create an aliased <code>cinemaDBtest.movie_trailer</code> table reference
     */
    public MovieTrailer(Name alias) {
        this(alias, MOVIE_TRAILER);
    }

    private MovieTrailer(Name alias, Table<MovieTrailerRecord> aliased) {
        this(alias, aliased, null);
    }

    private MovieTrailer(Name alias, Table<MovieTrailerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> MovieTrailer(Table<O> child, ForeignKey<O, MovieTrailerRecord> key) {
        super(child, key, MOVIE_TRAILER);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Cinemadbtest.CINEMADBTEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MOVIE_TRAILER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<MovieTrailerRecord, Long> getIdentity() {
        return Keys.IDENTITY_MOVIE_TRAILER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<MovieTrailerRecord> getPrimaryKey() {
        return Keys.KEY_MOVIE_TRAILER_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<MovieTrailerRecord>> getKeys() {
        return Arrays.<UniqueKey<MovieTrailerRecord>>asList(Keys.KEY_MOVIE_TRAILER_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<MovieTrailerRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MovieTrailerRecord, ?>>asList(Keys.TRAILER_FK);
    }

    public Movie movie() {
        return new Movie(this, Keys.TRAILER_FK);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MovieTrailer as(String alias) {
        return new MovieTrailer(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public MovieTrailer as(Name alias) {
        return new MovieTrailer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieTrailer rename(String name) {
        return new MovieTrailer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MovieTrailer rename(Name name) {
        return new MovieTrailer(name, null);
    }
}
